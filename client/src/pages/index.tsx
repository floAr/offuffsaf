import Head from "next/head";

import { zuAuthPopup, ETHPRAGUE_TICKET, ETHBERLIN04 } from "@pcd/zuauth";

import { authenticate } from "@pcd/zuauth/server";
import { Box, Button, Checkbox, FormControl, FormLabel, Heading, Image, Input, Link, Spinner, Step, StepIcon, StepIndicator, StepNumber, StepSeparator, StepStatus, StepTitle, Stepper, Tab, TabList, TabPanel, TabPanels, Tabs, Text, Textarea, VStack, useSteps } from "@chakra-ui/react";
import { createThirdwebClient } from "thirdweb";
import { resolveScheme, upload } from "thirdweb/storage";
import { Profile, createProfile } from "../profile";
import useLocalStorage from "use-local-storage";
import { ZKEdDSAEventTicketPCD } from "@pcd/zk-eddsa-event-ticket-pcd";
import QRCode from "react-qr-code";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";

if (!process.env.NEXT_PUBLIC_THIRDWEB_CLIENT_ID) {
  throw new Error('Missing NEXT_PUBLIC_THIRDWEB_CLIENT_ID');
}

const client = createThirdwebClient({
  clientId: process.env.NEXT_PUBLIC_THIRDWEB_CLIENT_ID,
});

// YOLO
const watermark = "12345";
const config = [...ETHPRAGUE_TICKET, ...ETHBERLIN04];

const steps = [
  { title: 'Get Started' },
  { title: 'Subscribe' },
  { title: 'Verify' },
  { title: 'Create' },
];

export default function Home() {
  const [authResult, setAuthResult] = useLocalStorage<ZKEdDSAEventTicketPCD | null>('authResult', null);
  const [profile, setProfile] = useLocalStorage<Profile | null>('profile', null);

  const router = useRouter();

  const { reset } = router.query;

  useEffect(() => {
    if (reset === 'true') {
      setAuthResult(null);
      setProfile(null);
      router.push('/');
    }
  }, [reset]);

  const [subscribed, setSubscribed] = useState<boolean>(!!profile);

  const { activeStep, goToNext, setActiveStep } = useSteps({
    index: 0,
    count: steps.length,
  });

  useEffect(() => {
    if (profile) {
      // Skip to the last step if the profile is already created
      setActiveStep(4);
    }
  }, [profile, setActiveStep]);

  const onClick = async () => {
    const result = await zuAuthPopup({
      fieldsToReveal: {
        revealAttendeeSemaphoreId: true,
      },
      watermark,
      config,
    });

    if (result.type !== 'pcd') {
      throw new Error('Unexpected result type');
    }

    const authResult = await authenticate(result.pcdStr, watermark, config);

    if (!authResult.claim.partialTicket.attendeeSemaphoreId) {
      throw new Error('No attendeeSemaphoreId in ticket');
    }

    setAuthResult(authResult);
    goToNext();
  };

  const onSubmit = async (e: any) => {
    e.preventDefault();
    goToNext();
    const data = new FormData(e.target);
    const name = data.get('name')?.toString() ?? ':name:';
    const image = data.get('image') as File;
    const bio = data.get('bio')?.toString() ?? ':bio:';

    const uri = await upload({
      client,
      files: [image],
    });

    const url = resolveScheme({
      client,
      uri,
    });

    if (!authResult?.claim.partialTicket.attendeeSemaphoreId) {
      throw new Error('No authResult');
    }

    const payload = {
      attendeeSemaphoreId: authResult.claim.partialTicket.attendeeSemaphoreId,
      url,
      title: name,
      description: bio,
    };

    console.info(`Creating profile for ${JSON.stringify(payload)}`);

    setProfile(payload);
    await createProfile(payload);
  };

  const connectURL = new URL(`${process.env.NEXT_PUBLIC_URL}/connect`);
  connectURL.searchParams.append('attendeeSemaphoreId', profile?.attendeeSemaphoreId ?? '');
  connectURL.searchParams.append('name', profile?.title ?? '');
  connectURL.searchParams.append('bio', profile?.description ?? '');
  connectURL.searchParams.append('image', profile?.url ?? '');

  return (
    <>
      <Head>
        <title>zumeet</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <VStack spacing={4} padding="20px">
          <VStack maxW={350} spacing={4}>
            <Heading as="h1" textStyle='h1' sx={{ fontFamily: '"Poetsen One", sans-serif' }} textTransform="lowercase">Zumeet</Heading>
            {!profile ? (<>
              <Stepper index={activeStep} colorScheme="teal">
                {steps.map((step, index) => (
                  <Step key={index}>
                    <StepIndicator>
                      <StepStatus
                        complete={<StepIcon />}
                        incomplete={<StepNumber />}
                        active={<StepNumber />}
                      />
                    </StepIndicator>

                    <Box flexShrink='0'>
                      {activeStep === index ? <StepTitle>{step.title}</StepTitle> : null}
                    </Box>
                    <StepSeparator />
                  </Step>
                ))}
              </Stepper>
              {activeStep == 0 && (<VStack spacing={4}>
                <p>Zumeet let&apos;s you connect with other event participants by exchanging a unique event profile in three steps:</p>
                <ol>
                  <li><Text fontWeight="bold">Verify</Text> event attendance with Zupass</li>
                  <li><Text fontWeight="bold">Create</Text> your profile</li>
                  <li><Text fontWeight="bold">Scan</Text> somebody&apos;s QR code</li>
                </ol>
                <Button colorScheme='teal' onClick={goToNext}>Next</Button>
              </VStack>)}
              {activeStep == 2 && (<VStack spacing={4}>
                <p>Click &apos;Confirm&apos; to confirm your attendance at ETHBerlin04 or at EthPrague using <Link href="https://zupass.org/" color='teal.500' isExternal>Zupass</Link>.</p>
                {authResult ? (<><p>Already confirmed!</p><Button colorScheme='teal' onClick={goToNext}>Next</Button></>) : <Button colorScheme='teal' onClick={onClick}>Confirm</Button>}
              </VStack>)}
              {activeStep == 1 && (<VStack spacing={3}>
                <p>Click &apos;Subscribe&apos; and subscribe to &apos;ETHBerlin-Zumeet&apos; feed.</p>
                <Button colorScheme="teal" onClick={() => window.open('https://zupass.org/#/add-subscription?url=https%3A%2F%2Fzupass-feed.vercel.app%2Fapi%2Ffeeds', '_blank')}>Subscribe</Button>
                <Box>After subscibing, check the box and click Next</Box>
                <Checkbox isChecked={subscribed} onChange={(e) => { setSubscribed(e.target.checked) }}>I have subscribed</Checkbox>
                <Button colorScheme='teal' onClick={goToNext} isDisabled={!subscribed}>Next</Button>
              </VStack>)}
              {activeStep == 3 && (<VStack spacing={4}>
                <p>Create your event profile by providing name, note and image. This information will be shown in your connections&apos; feed. </p>
                {profile ? (<><p>Profile created</p><Button colorScheme='teal' onClick={goToNext}>Next</Button></>) :
                  (<form onSubmit={onSubmit}>
                    <VStack spacing={2}>
                      <FormControl isRequired>
                        <FormLabel>Name</FormLabel>
                        <Input type='text' placeholder="Type an alias e.g. Telegram handle, Twitter name etc." name="name" />
                      </FormControl>
                      <FormControl>
                        <FormLabel>Note</FormLabel>
                        <Textarea placeholder="Type a short personal note" name="bio" />
                      </FormControl>
                      <FormControl isRequired>
                        <FormLabel>Image</FormLabel>
                        <input type="file" name="image" required={true} />
                      </FormControl>
                      <Button colorScheme='teal' type="submit" marginTop="12px">Create</Button>
                    </VStack>
                  </form>)}
              </VStack>)}
              {activeStep == 4 && (<VStack spacing={4}>
                <Spinner />
                <p>Creating profile...</p>
              </VStack>)}
            </>) : (
              <>
                <Tabs variant='soft-rounded' colorScheme='teal'>
                  <TabList justifyContent="center">
                    <Tab>Share</Tab>
                    <Tab>Profile</Tab>
                  </TabList>

                  <TabPanels>
                    <TabPanel>
                      <VStack spacing={4}>
                        <Text>Show others to scan with your camera app</Text>
                        <QRCode value={connectURL.toString()} size={318} />
                      </VStack>
                    </TabPanel>
                    <TabPanel>
                      <Box borderWidth="2px" borderColor="2px" borderRadius="12px" padding="2px">
                        <VStack>
                          <Heading as="h3" size="md" textTransform="uppercase" paddingTop="10px">{profile.title}</Heading>
                          <Image src={profile.url} alt={profile.title} />
                          <Text>{profile.description}</Text>
                        </VStack>
                      </Box>
                    </TabPanel>
                  </TabPanels>
                </Tabs>
                <Link color="teal.500" href="https://zupass.org/#/?folder=ETHBerlin-Zumeet" isExternal>View connections in Zupass</Link>
                <Box>or</Box>
                <Link color="teal.500" href="https://zupass.org/#/add-subscription?url=https%3A%2F%2Fzupass-feed.vercel.app%2Fapi%2Ffeeds" isExternal>Re-subscribe to feed</Link>
              </>
            )}
          </VStack>
        </VStack>
      </main >
    </>
  );
}
